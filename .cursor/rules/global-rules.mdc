---
description:
globs:
alwaysApply: true
---
# Rule Name: global-rules
# Description: Core development rules and AI collaboration guidelines for the project

---
globs:
alwaysApply: true
---

# Cursor Development Rules & AI Collaboration Guide

## ü§ñ Cursor Behavior Rules


1. **No Apologies or Filler:** Maintain a concise, professional tone. Omit apologies and filler language.
2. **No Unprompted Implementation Discussion:** Avoid unnecessary discussion of existing code details.


## üìú Core Philosophy


1.  **Simplicity:** Prioritize simple, clear, and maintainable solutions. Avoid unnecessary complexity or over-engineering.
2.  **Iterate:** Prefer iterating on existing, working code rather than building entirely new solutions from scratch, unless fundamentally necessary or explicitly requested.
3.  **Focus:** Concentrate efforts on the specific task assigned. Avoid unrelated changes or scope creep.
4.  **Quality:** Strive for a clean, organized, well-tested, and secure codebase.
5.  **Collaboration:** This document guides both human developers and the AI assistant for effective teamwork.


## üìö Project Context & Understanding


1.  **Documentation First:**
   *   **Always** check for and thoroughly review relevant project documentation *before* starting any task. This includes:
       *   `README.md` (Project overview, setup, patterns, technology stack)
       *   `.cursor/docs/architecture.md` (System architecture, component relationships)
       *   `.cursor/docs/technical.md` (Technical specifications, established patterns)
       *   `.cursor/development/tasks.md` (Current development tasks, requirements)
       *   `.cursor/development/planning.md` (Current development progress)
   *   If documentation is missing, unclear, or conflicts with the request, **ask for clarification** and then **create/update the necessary files**.
2.  **Architecture Adherence:**
   *   Understand and respect module boundaries, data flow, system interfaces, and component dependencies outlined in `.cursor/docs/architecture.md`.
   *   Validate that changes comply with the established architecture. Warn and propose compliant solutions if a violation is detected.
3.  **Pattern & Tech Stack Awareness:**
   *   Reference `README.md` and `.cursor/docs/technical.md` to understand and utilize existing patterns and technologies.
   *   Exhaust options using existing implementations before proposing new patterns or libraries.


## ‚öôÔ∏è Task Execution & Workflow


1.  **Task Definition:**
   *   Clearly understand the task requirements, acceptance criteria, and any dependencies from `.cursor/development/tasks.md`.
2.  **Systematic Change Protocol:** Before making significant changes:
   *   **Identify Impact:** Determine affected components, dependencies, and potential side effects.
   *   **Plan:** Outline the steps. Tackle one logical change or file at a time.
3.  **Progress Tracking:**
   *   Keep `.cursor/docs/status.md` updated with task progress (in-progress, completed, blocked), issues encountered, and completed items.
   *   Update `.cursor/development/tasks.md` upon task completion or if requirements change during implementation.


## ‚ú® Code Quality & Style


1.  **Readability & Maintainability:** Write clean, well-organized code.
2.  **Small Files & Components:**
   *   Keep files under **500 lines**. Refactor proactively.
3.  **Avoid Duplication (DRY):** Actively look for and reuse existing functionality. Refactor to eliminate duplication.
4.  **Pattern Consistency:** Adhere to established project patterns. Don't introduce new ones without discussion/explicit instruction. If replacing an old pattern, ensure the old implementation is fully removed.
5.  **File Naming:** Use clear, descriptive names. Avoid "temp", "refactored", "improved", etc., in permanent file names.
6.  **No One-Time Scripts:** Do not commit one-time utility scripts into the main codebase.


## ‚ôªÔ∏è Refactoring


1.  **Purposeful Refactoring:** Refactor to improve clarity, reduce duplication, simplify complexity, or adhere to architectural goals.
2.  **Holistic Check:** When refactoring, look for duplicate code, similar components/files, and opportunities for consolidation across the affected area.
3.  **Edit, Don't Copy:** Modify existing files directly. Do not duplicate files and rename them (e.g., `component-v2.tsx`).
4.  **Verify Integrations:** After refactoring, ensure all callers, dependencies, and integration points function correctly. Run relevant tests.


## ‚úÖ Testing & Validation


1.  **Comprehensive Tests:** Write thorough unit, integration, and/or end-to-end tests covering critical paths, edge cases, and major functionality.
2.  **Tests Must Pass:** All tests **must** pass before committing or considering a task complete. Notify the human developer immediately if tests fail and cannot be easily fixed.
3.  **No Mock Data (Except Tests):** Use mock data *only* within test environments. Development and production should use real or realistic data sources.
4.  **Manual Verification:** Supplement automated tests with manual checks where appropriate.


## üêõ Debugging & Troubleshooting


1.  **Fix the Root Cause:** Prioritize fixing the underlying issue causing an error, rather than just masking or handling it, unless a temporary workaround is explicitly agreed upon.
2.  **Console/Log Analysis:** Always check browser and server console output for errors, warnings, or relevant logs after making changes or when debugging. Report findings.
3.  **Targeted Logging:** For persistent or complex issues, add specific `console.log` statements (or use a project logger) to trace execution and variable states. *Remember to check the output.*
4.  **Research:** Use available tools (Web, Brave Search, documentation search, etc.) to research solutions or best practices when stuck or unsure.


## üîí Security


1.  **Server-Side Authority:** Keep sensitive logic, validation, and data manipulation strictly on the server-side. Use secure API endpoints.
2.  **Input Sanitization/Validation:** Always sanitize and validate user input on the server-side.
3.  **Dependency Awareness:** Be mindful of the security implications of adding or updating dependencies.
4.  **Credentials:** Never hardcode secrets or credentials in the codebase. Use environment variables or a secure secrets management solution.


## üìÑ Documentation Maintenance


1.  **Update Docs:** If code changes impact architecture, technical decisions, established patterns, or task status, update the relevant documentation (`README.md`, `.cursor/docs/architecture.md`, `.cursor/docs/technical.md`, `.cursor/development/tasks.md`, `.cursor/development/status.md`).
2.  **Keep Rules Updated:** This `.cursorrules`/`.mdc` file should be reviewed and updated periodically to reflect learned best practices and project evolution.

## üìö Technical Documentation Maintenance

1. **Maintain technical.md**: The `.cursor/docs/technical.md` file serves as the authoritative reference for technical specifications and established patterns in the project. **ALWAYS** update this file when you:
   * Discover undocumented but consistently used patterns
   * Implement new technical approaches with approval
   * Find significant technical decisions that aren't documented
   * Identify reusable components or utilities
   * Encounter dependency version requirements or constraints

2. **Document Technical Patterns**: In `.cursor/docs/technical.md`, document all significant patterns including but not limited to:
   * **React Component Patterns**:
     * Component organization (atomic design, feature-based, etc.)
     * Props passing conventions
     * Render optimization approaches (memo, callback, etc.)
   * **State Management**:
     * Redux store structure and conventions
     * React Query usage patterns
     * Local vs. global state decisions
   * **Data Fetching**:
     * API client implementation
     * Error handling and retry logic
     * Loading state management
   * **Styling Approaches**:
     * CSS/SCSS methodology
     * Theme implementation
     * Responsive design patterns
   * **Backend Integration**:
     * API endpoint structure
     * Request/response formatting
     * Authentication patterns
   * **TypeScript Standards**:
     * Type definition organization
     * Generic patterns
     * Type guard implementations
   * **Testing Methodologies**:
     * Unit testing conventions
     * Integration testing approaches
     * Mocking strategies

3. **Format & Structure**: When adding to `technical.md`:
   * Use clear section headings for easy navigation
   * Include concise code examples for complex patterns
   * Reference the files where patterns are implemented
   * Note any exceptions or special cases
   * Document "why" decisions were made, not just "what" they are
